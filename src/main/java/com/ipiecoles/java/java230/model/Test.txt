package com.ipiecoles.java.java230;

import com.ipiecoles.java.java230.Repository.EmployeRepository;
import com.ipiecoles.java.java230.model.Employe;
import org.joda.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class MyRunner implements CommandLineRunner {

    @Autowired
    private EmployeRepository employeRepository;

    @Override
    public void run(String... strings) throws Exception {

        System.out.println("Coucou");
        Integer page = 0; //Numéro de la page que nous souhaitons afficher
        Integer size = 15; //Taille du nombre de résultats qui seront affichés
        PageRequest pageRequest = new PageRequest(page, size, Sort.Direction.ASC, "nom", "prenom");
        Page<Employe> pageEmploye = employeRepository.findAll(pageRequest);
        System.out.println(pageEmploye.getTotalElements() + " employé(s) contenu(s) dans la pagination."); //Nbre total d'éléments dans la requête
        System.out.println(pageEmploye.getTotalPages() + " pages au total.");//Nbre total de pages
        for(Employe employe : pageEmploye) {
            System.out.println("PageRequest : " + employe.getNom() + ", " + employe.getPrenom());
        }

        /*List<Employe> listEmploye = (List<Employe>) employeRepository.findAll(new Sort(Sort.Direction.ASC, "dateEmbauche", "nom"));
        for(Employe employe : listEmploye) {
            System.out.println("Tri par date d'embauche et nom : " + employe.getNom() + ", " + employe.getPrenom());
        }*/

        /*Create
        Employe employee = new Employe("Doe", "John", "X66666", LocalDate.now(), 2000.0);
        employee = employeRepository.save(employee);
        System.out.println("Nouvel employé : " + employee.getId());

        //Update
        employee.setMatricule("X66667");
        employee = employeRepository.save(employee);
        System.out.println("Nouvel employé modifié : " + employee.toString());

        //Delete
        employeRepository.delete(employee);

        //Read
        Employe e = employeRepository.findOne(4L);
        System.out.println("Employé1 : " + e.getNom() + ", " + e.getPrenom());

        Employe e2 = employeRepository.findByMatricule("M11109");
        System.out.println("Employé2 : " + e2.getNom() + ", " + e2.getPrenom());

        List<Employe> listeEmploye = employeRepository.findByNomAndPrenom("Gaillard", "Victor");
        for(Employe employe : listeEmploye) {
            System.out.println("Employe3 : " + employe.getNom() + ", " + employe.getPrenom());
        }

        // Date d'embauche
        LocalDate date = new LocalDate(2007, 12, 31);
        listeEmploye = employeRepository.findByDateEmbaucheBefore(date);
        for(Employe employe : listeEmploye) {
            System.out.println("Employe4-1 : " + employe.getNom() + ", " + employe.getPrenom());
        }
        */
        /*listeEmploye = employeRepository.findByDateEmbaucheAfter(date);
        for(Employe employe : listeEmploye) {
            System.out.println("Employe4-2 : " + employe.getNom() + ", " + employe.getPrenom());
        }*/

        listeEmploye = employeRepository.findByNomIgnoreCase("gaillard");
        for(Employe employe : listeEmploye) {
            System.out.println("Employe5 : " + employe.getNom() + ", " + employe.getPrenom());
        }

        List<Employe> listEmploye1 = employeRepository.findBySalaireGreaterThanOrderBySalaireAsc(2450.45);
        List<Employe> listEmploye2 = employeRepository.findByNomIgnoreCase("baRre");
        List<Employe> listEmploye3 = employeRepository.findEmployePlusRiches();
        List<Employe> listEmploye = employeRepository.findByNomOrPrenomAllIgnoreCase("Marie");
        for(Employe employe : listEmploye) {
            System.out.println("Employe : " + employe.getNom() + ", " + employe.getPrenom());
        }
    }

    public static void print(Object t) {
        System.out.println(t);
    }
}